rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    match /transactions/{transactionId} {
      allow read, update, delete: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;
    }

    match /recurring-expenses/{expenseId} {
      // The user must be the owner of the document they are trying to read/write.
      // The second part of the OR is for creation, where resource.data doesn't exist yet.
      allow read, write: if request.auth.uid == resource.data.userId || (request.resource.data.userId != null && request.auth.uid == request.resource.data.userId);
    }

    match /friend-requests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.fromUser.uid;
      allow read: if request.auth.uid == resource.data.fromUser.uid || request.auth.uid == resource.data.toUserId;
      allow update, delete: if request.auth.uid == resource.data.toUserId;
    }

    // FIX: Added 'update' permission to allow profile info (like avatar) to be propagated.
    match /friendships/{friendshipId} {
        allow create, read, delete, update: if request.auth.uid in resource.data.userIds;
    }

    // FIX: The update rule was too restrictive, preventing members from propagating profile changes.
    // Now, any member of a circle can update the document. The client-side logic ensures they only
    // update their own information, and the owner is the only one who can do destructive actions.
    match /circles/{circleId} {
        allow read: if request.auth.uid in resource.data.memberIds;
        allow create: if request.auth.uid == request.resource.data.ownerId;
        allow update: if request.auth.uid in resource.data.memberIds;
        allow delete: if request.auth.uid == resource.data.ownerId;
    }

    // FIX: The delete rule was too simple and failed in batch writes.
    // This rule now explicitly allows the circle owner to delete debts associated with their circle.
    match /debts/{debtId} {
      allow create, update, read: if request.auth.uid in resource.data.involvedUids;
      allow delete: if resource.data.circleId != null && get(/databases/$(database)/documents/circles/$(resource.data.circleId)).data.ownerId == request.auth.uid;
    }

    // FIX: The delete rule was failing in batch writes.
    // This allows an invitee to reject/delete the invite, OR the circle owner to delete it (e.g., when deleting the circle).
    match /circle-invitations/{invitationId} {
        allow read, create: if request.auth.uid == request.resource.data.toUserId || request.auth.uid == request.resource.data.fromUser.uid;
        allow update: if request.auth.uid == request.resource.data.toUserId;
        allow delete: if request.auth.uid == resource.data.toUserId || (resource.data.circleId != null && get(/databases/$(database)/documents/circles/$(resource.data.circleId)).data.ownerId == request.auth.uid);
    }

    match /notifications/{notificationId} {
      allow read, update, delete: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.fromUser.uid;
    }
  }
}
