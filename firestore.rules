rules_version = '2';

service cloud.firestore {
  // Helper function to check if the requesting user is the owner of a given circle.
  function isCircleOwner(circleId) {
    return get(/databases/$(database)/documents/circles/$(circleId)).data.ownerId == request.auth.uid;
  }

  match /databases/{database}/documents {
  
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }
    
    match /transactions/{transactionId} {
      allow read, update, delete: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;
    }

    match /recurring-expenses/{expenseId} {
      allow read, write: if request.auth.uid == request.resource.data.userId || request.auth.uid == resource.data.userId;
    }
    
    match /friend-requests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.fromUser.uid;
      allow read: if request.auth.uid == resource.data.fromUser.uid || request.auth.uid == resource.data.toUserId;
      // Allow either user to cancel/reject/delete the request.
      allow update, delete: if request.auth.uid == resource.data.toUserId || request.auth.uid == resource.data.fromUser.uid;
    }
    
    match /friendships/{friendshipId} {
        allow read, delete: if request.auth.uid in resource.data.userIds;
        allow create: if request.auth.uid in request.resource.data.userIds;
    }
    
    match /circles/{circleId} {
        allow read: if request.auth.uid in resource.data.memberIds;
        allow create: if request.auth.uid == request.resource.data.ownerId;
        allow update: if request.auth.uid in resource.data.memberIds;
        allow delete: if request.auth.uid == resource.data.ownerId;
    }

    match /debts/{debtId} {
      allow create: if request.auth.uid in request.resource.data.involvedUids;
      allow read: if request.auth.uid in resource.data.involvedUids;
      allow update: if request.auth.uid in resource.data.involvedUids;
      // FIX: Allow the owner of the circle to delete a debt record.
      allow delete: if isCircleOwner(resource.data.circleId);
    }
    
    match /circle-invitations/{invitationId} {
      allow read: if request.auth.uid == resource.data.toUserId || request.auth.uid == resource.data.fromUser.uid;
      // FIX: Allow the recipient to delete (accept/reject) OR the circle owner to delete (cleanup).
      allow delete: if request.auth.uid == resource.data.toUserId || isCircleOwner(resource.data.circleId);
      allow create: if request.auth.uid == request.resource.data.fromUser.uid;
    }

    match /notifications/{notificationId} {
      allow read, update, delete: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.fromUser.uid;
    }
  }
}