
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }
    
    match /transactions/{transactionId} {
      allow read, update, delete: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.userId;
    }

    match /recurring-expenses/{expenseId} {
      allow read, write: if request.auth.uid == request.resource.data.userId || request.auth.uid == resource.data.userId;
    }
    
    match /friend-requests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.fromUser.uid;
      allow read: if request.auth.uid == resource.data.fromUser.uid || request.auth.uid == resource.data.toUserId;
      allow update, delete: if request.auth.uid == resource.data.toUserId;
    }
    
    match /friendships/{friendshipId} {
        allow read, delete: if request.auth.uid in resource.data.userIds;
        allow create: if request.auth.uid in request.resource.data.userIds;
        allow update: if request.auth.uid in resource.data.users;
    }
    
    match /circles/{circleId} {
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow read: if request.auth.uid in resource.data.memberIds;

      // Allow owner to update name, add members, or delete
      allow update: if request.auth.uid == resource.data.ownerId;
      
      // Allow any member to leave (which is an update)
      allow update: if request.auth.uid in resource.data.memberIds;
      
      // Only owner can delete
      allow delete: if request.auth.uid == resource.data.ownerId;
    }
    
    function isCircleOwner(circleId, userId) {
      return get(/databases/$(database)/documents/circles/$(circleId)).data.ownerId == userId;
    }

    match /debts/{debtId} {
      allow create: if request.auth.uid in request.resource.data.involvedUids;
      allow read, update: if request.auth.uid in resource.data.involvedUids;
      allow delete: if resource.data.circleId != null && isCircleOwner(resource.data.circleId, request.auth.uid);
    }
    
    match /circle-invitations/{invitationId} {
        allow create: if request.auth.uid == request.resource.data.inviter.uid;
        allow read: if request.auth.uid == request.resource.data.inviter.uid || request.auth.uid == request.resource.data.invitee.uid;
        allow update, delete: if request.auth.uid == request.resource.data.invitee.uid;
        allow delete: if resource.data.circleId != null && isCircleOwner(resource.data.circleId, request.auth.uid);
    }

    match /notifications/{notificationId} {
      allow read, update, delete: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.fromUser.uid;
    }

    match /expense-claims/{claimId} {
      allow create: if request.auth.uid == request.resource.data.claimerId;
      allow read: if request.auth.uid == resource.data.claimerId || request.auth.uid == resource.data.payerId;
      allow update, delete: if request.auth.uid == resource.data.payerId;
    }
  }
}
